<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | <insert witty blog title>]]></title>
  <link href="http://stevendick.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://stevendick.github.com/"/>
  <updated>2012-06-03T22:45:04+02:00</updated>
  <id>http://stevendick.github.com/</id>
  <author>
    <name><![CDATA[Steven Dick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Training]]></title>
    <link href="http://stevendick.github.com/blog/2012/06/02/clojure-training/"/>
    <updated>2012-06-02T11:24:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/06/02/clojure-training</id>
    <content type="html"><![CDATA[<p>Further to my earlier blog post on the <a href="http://stevendick.github.com/blog/2012/04/30/dive-into-clojure/">Clojure Programming</a> book, I decided to give myself a good kickstart by attending the Euroclojure training and conference in London at the end of May 2012.</p>

<p>I was disappointed to learn that only seven people were taking the opportunity for the training, especially since <a href="http://thinkrelevance.com/">Relevance</a> were they guys giving the course. On the other hand, it did mean everyone could engage with the two instructors, Stuart Sierra and Luke VanderHart (and yes, that is a capital H in the middle of his surname) at leisure.</p>

<p>At this stage of Clojure's growth, who invests in a training course? We had a couple of trainers from Ireland, a startup founder from Denmark and two guys from the CNRS, the French National Center for Scientific Research. All keen technologists, as you'd expect. Investing in Clojure from a career point-of-view is not a sure-fire winner at this point-in-time.</p>

<p>The course was over three days and alternated between theory and some of the most challanging labs I've had in language training. It wasn't always possible to complete the labs in the time allowed (which was at least an hour), but one could always come back to them in quiet moments or at the end-of-the-day. Luke and Stuart alternated between the topics and the class had a good back-and-forth discussion with both the trainers.</p>

<p>Of the lab sessions, I most enjoyed solving the how-to-score-a-hand-of-poker problems. This involved lots of higher-order function use and I needed an additional hour in the evening to finish it, but it did give a sense of accomplishment when I got the final code to run.</p>

<p>For the afternoon of the last day we had an introduction to <a href="https://github.com/clojure/clojurescript">ClojureScript</a>. This was the one part of the training that didn't work for me. To give some context, I mostly do server side development and last did web development back in 1999 with a mixture of ASP, VBScript and Javascript. We used the <a href="http://clojurescriptone.com/">ClojureScriptOne</a> application as the starting point of wiring up a web application to rock-paper-scissors game we implemented in an earlier lab.</p>

<p>This involved too much magic for me and I couldn't work out what needed to be done for most of the lab exercises and needed to look at the answers. So while I'm interested in ClojureScript, this lab didn't improve my understanding.</p>

<p>For the final hour of the training Stuart suggested we work through some code examples as a group to give a more interactive approach. This worked well and helped me get on track as my solo efforts to solve the last problem were going in the wrong direction.</p>

<p>All-in-all I thoroughly enjoyed the training and would recommend it to anyone interested in getting their feet wet with Clojure. Thanks go to Stuart and Luke for an entertaining three days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Clojure]]></title>
    <link href="http://stevendick.github.com/blog/2012/04/30/dive-into-clojure/"/>
    <updated>2012-04-30T18:01:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/04/30/dive-into-clojure</id>
    <content type="html"><![CDATA[<p>No, not a review of a Clojure book you've never heard of: Dive into Clojure, but more a play on words as I spent quite a bit of time reading <a href="http://clojurebook.com">Clojure Programming</a> (not to be confused with <a href="http://pragprog.com/book/shcloj/programming-clojure">Programming Clojure</a>) while on a diving holiday in Egypt's Red Sea.</p>

<p>Before getting to the book I want to say I think O'Reilly's Safari Online is pretty terrible. Difficult to navigate and always pushing for you to take a paid subscription. It compares badly to The <a href="http://pragprog.com">Pragmatic Programmer</a> guys in managing your books online. I was annoyed that the epud version wasn't available until the book was finished (I regularly use the early access feature to technical books).</p>

<p>I did very little functional programming at University and what I did (ML), I didn't like and/or appreciate. Since then I've been programming in a variety of languages including C/C++, Visual Basic and, for the last 10 years, Java. All firmly in the imperative style.</p>

<p>I am always looking for tools to make my programming life easier and I've become increasingly frustrated with Java's verbosity and clumsy support for meta-programming.</p>

<p>Of the newer languages on the block, I've dabbled with Python, Ruby, Groovy, Scala and now Clojure. So far, Groovy had been the the alternative language that was usable in my day job as it can work as a companion to your Java code whereas I see the other languages as a complete replacement (though they can all run on the JVM).</p>

<p>Why Clojure? Why not? Clojure had 2 points that drew me to it: it's a Lisp and that has an air of mysticism attached to it since it comes from the dawn of the computer age and it's a functional language. Scala pitches itself as a functional/OOP hybrid; you're not forced to go functional and I felt I would benefit from using a functional-only style language.</p>

<p>Of the three authors (Chas Emerick, Brian Carper and Christophe Grand), I had come across Chas and Christophe in my web reading around Clojure.</p>

<p>The first part of the book goes into detail on the nuts and bolts of Clojure before getting to the functional and concurrency parts of the language.</p>

<p>The one thing that sold me on the book and spending more time with Clojure is the example of a functional approach to implementing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway's Game of Life</a>.</p>

<p>Wow.</p>

<p>This was a real eye opener for me on the power of a functional style. The elegance of the solution is something for me to aspire to as I learn more of Clojure.</p>

<p>This is the first time I've explored macros in Clojure. Previously I suffered the double trouble of hearing that macros are complicated and a mind poisoned by the C/C++ usage of the word 'macro'. While I'm sure there's plenty still to learn about them, I'm starting to see the power and their usage.</p>

<p>I enjoyed the fact that the book goes into detail on practical things, such as database access, web programming and how to deploy things. All essential features of getting stuff working in the real world.</p>

<p>I heartily recommend the book.</p>
]]></content>
  </entry>
  
</feed>
