<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<insert witty blog title>]]></title>
  <link href="http://stevendick.github.com/atom.xml" rel="self"/>
  <link href="http://stevendick.github.com/"/>
  <updated>2013-08-13T11:59:57+02:00</updated>
  <id>http://stevendick.github.com/</id>
  <author>
    <name><![CDATA[Steven Dick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Write a Spring MVC Controller in Clojure]]></title>
    <link href="http://stevendick.github.com/blog/2013/08/13/write-a-spring-mvc-controller-in-clojure/"/>
    <updated>2013-08-13T10:36:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2013/08/13/write-a-spring-mvc-controller-in-clojure</id>
    <content type="html"><![CDATA[<p>Clojure&#8217;s great fun, but how can I increase its chances of use at work?</p>

<p>From personal experience and feedback from others, I don&#8217;t see big rewrites of systems being a viable way of introducing new technology; who can take the risk of spending 6 months to simply end up with the same business features again? That doesn&#8217;t deliver value for the users.</p>

<p>I much more subscribe to the approach of incremental improvement through an approach such as the <a href="www.paulhammant.com/blog/strangulation">strangulation pattern</a>. The question was, could I incrementally introduce Clojure?</p>

<p>The server application I work on is for the operations part of the financial Fund of Fund business; financial transactions, valuations and planning. Its a Java application using Spring MVC to expose the API via HTTP.</p>

<p>I was first thinking I needed to use Clojure&#8217;s <a href="https://github.com/ring-clojure">Ring library</a> for the HTTP part which then lead me to the <a href="https://github.com/laurentpetit/ring-java-servlet">ring-java-servlet</a> project for adding a new Servlet to our existing web.xml.</p>

<p>Upon reflection, this didn&#8217;t feel the right way to go. Thinking a bit more, couldn&#8217;t I write a Spring MVC controller in Clojure?</p>

<p>The short answer is yes!</p>

<div><script src='https://gist.github.com/6224664.js?file=spring-mvc-controller.clj'></script>
<noscript><pre><code>(ns liquidity.controller
  (:import org.springframework.stereotype.Controller
            (org.springframework.web.bind.annotation RequestMapping RequestMethod ResponseBody))
  (:gen-class
    :name ^{Controller &quot;&quot;} ch.hedgesphere.liquidity.controller.LiquidityController
    :methods [[^{RequestMapping {:value [&quot;/liquidity&quot;] :method [RequestMethod/GET]} ResponseBody {}} hello [] String]]))

(defn -hello [this]
  &quot;Hello world from a Clojure-based controller!&quot;)</code></pre></noscript></div>


<p>Sorry if the colours appear crappy, but somethings changed with code snippets in Octopress and I want to get the article out rather than delay publishing - I will tidy up afterwords!</p>

<p>We use Spring MVC&#8217;s annotation-based configuration to find controllers in the application&#8217;s classpath. This means we need to use Clojure&#8217;s AOT (Ahead Of Time) compilation so that there is a class to find at start-up time.</p>

<p>This was the first time I&#8217;ve used Clojure&#8217;s support for generating a class, which wasn&#8217;t difficult. What was more challanging was getting the annotations correct.</p>

<p>Clojure has support for adding metadata to symbols and collections. This approach is used for adding Java annotations to generated classes and methods. The tricky bit is working out what value to give the annotation (it&#8217;s a map so every annotation needs a value).</p>

<p>If there&#8217;s no value for the annotation, you can use an empty map. The empty string given to the Controller annotation is because you can give an optional name.</p>

<p>In Java I&#8217;d use a single string to add the URL template to the RequestMapping annotation, but if you read the source code for the annotation you&#8217;ll notice that it is actually an array. I&#8217;m not sure if the ability to add a single string is some syntactic sugar of the Java compiler, but you can&#8217;t do this from Clojure; you need to make it a list.</p>

<p>For building, I used Leiningen via Eclipse&#8217;s CounterClockWise Clojure plug-in. You need to remember to tell Leiningen to do the AOT build as well otherwise the gen-class declaration is ignored.</p>

<p>Now I just need to find a new part of the system to implement where choosing Clojure would be the smart thing to do&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS]]></title>
    <link href="http://stevendick.github.com/blog/2012/10/01/angularjs/"/>
    <updated>2012-10-01T20:14:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/10/01/angularjs</id>
    <content type="html"><![CDATA[<p>Getting back into web development is an overwhelming experience as I recounted in my last entry. After perusing <a href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">this</a> interesting comparison of the various MVC Javascript frameworks, I decided to look further at <a href="http://angularjs.org/">AngularJS</a> (I&#8217;ll just call it Angular from here on out).</p>

<p>Why Angular? I liked Angular&#8217;s approach to HTML templating and the emphasis on testing. Only after someone else mentioned it, did I realise that Angular imposes no particular implementation on the model; many of the other frameworks impose an inheritence model.</p>

<p>Based on the quantity of links and Github watchers, <a href="http://backbonejs.org/">Backbone.js</a> appears to be the leader in this space, though I think the comparison might be rather superficial as Backbone is more limited in scope (by design) than Angular. Backbone is more at the library end of the scale and Angular is towards the framework end.</p>

<p>As part of my evaluation of Angular, I wanted to build some very minimal working code. I have a lot of experience with Java, but find Java (the language) frustrating for modern development. To increase the fun, I built the backend with Grails; the Java world&#8217;s answer to Ruby on Rails. Grails will be a topic of another blog entry.</p>

<h2>The Domain</h2>

<p>I work in finance, so the demo was around CRUD (I only did the RU bit for Angular) for managing trades, essentially the buying and selling of funds. It could be about CRUD for any thing as finance only impacted the name of the fields I was capturing, not the functionality of the demo.</p>

<h2>Learning</h2>

<p>I find Angular&#8217;s documentation adequate - nothing more. The API guide is complete, but often missing the &#8216;why&#8217; and the &#8216;how&#8217; of a feature. Experimentation is the name of the game -  something I assume anyone looking at an early-stage technology (in any area of IT) would be comfortable with.</p>

<p>I think the tutorial is the weakest part. I can&#8217;t quite put my finger on why the tutorial doesn&#8217;t work for me, but I didn&#8217;t like it and skipped it.</p>

<p>Much more useful was the basic <a href="https://github.com/angular/angular-seed">Angular template project</a>. Clone it from Github and you&#8217;re good to go with a minimal, working Angular app. Now you can experiment and see the results.</p>

<p>There&#8217;s a Google group and IRC chat channel as well. I had the occasional hit on the Google group when searching for answers, but I never tried the IRC channel for help.</p>

<p>There&#8217;s a good number of videos on Youtube from the Angular team from various presentations they&#8217;ve given. I&#8217;d also recommend looking at some of the shorter and more focused videos on implementing Angular, especially from <a href="http://www.youtube.com/user/johnlindquist">John Lindquist</a> - as a bonus you&#8217;ll see John using <a href="http://www.jetbrains.com/webstorm/">Webstorm</a>, a pretty nice IDE for web development that I switched to half way through my two week investigation.</p>

<h2>What I Implemented</h2>

<p>Because I don&#8217;t have enough new moving parts in my exploration, I deployed the end result to <a href="https://www.fohf.com/app/index.html">AWS (Amazon Web Services)</a> using a custom domain and added HTTPS support.</p>

<p>I&#8217;d already used Grails to generate scaffolding for a simple CRUD app for trade entry using server-side rendering, so I decided to replace the RU bit with an Angular implementation.</p>

<p>I&#8217;m assuming readers are at least vaguely familiar with the MVC pattern (and its many variants). At the end of the day I didn&#8217;t have much code to get Angular using the JSON-based Grails server. A big part of this is Angular&#8217;s <a href="http://docs.angularjs.org/api/ngResource.$resource">resource</a> abstraction that makes it simple to bind CRUD functionality to a REST-flavoured server.</p>

<p>One area Angular is not opinionated is the file structure of your project. Being recently returned to JavaScript, I don&#8217;t currently have a good feel for what makes a logical and maintainable file layout for Angular&#8217;s routes, controller, services and models. Looking at how others organise their projects will be an interesting learning experience.</p>

<h2>Security</h2>

<p>This more a general topic for the SPA (Single Page Application) style of application. With server-side rendering of web pages, it&#8217;s easy secure the HTTP end-points, but how to secure the XHR calls? Ultimately, this appears to be going the way of something like <a href="http://oauth.net/2/">OAuth2</a> with tokens added to every call, but I didn&#8217;t want to add yet another new topic to my investigation. Maybe I could continue to use session-based security I get for free with Grails?</p>

<p>The problem: requesting a secured URL triggers an HTTP 302 Found response that is automatically handled by the browser and does the redirection behind-the-scenes. You asked for a list of trades in JSON? Have an HTML page for the login form instead!</p>

<p>The redirect-to-login-page-on-insecure-access pattern doesn&#8217;t seem like a good fit for SPA apps. Looking at the HTTP responses, 401 Unauthorized seems a more fitting response. But how to handle this in Angular?</p>

<p>The Interwebs to the rescue! You can find a discussion and code for a solution <a href="http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application">here</a> and <a href="https://github.com/witoldsz/angular-http-auth">here</a>. Thanks to Witold Szczerba for sharing his solution. The solution uses Angular&#8217;s interception feature to:</p>

<ol>
<li>fire an event when we receive a HTTP 401 response and remember what we were trying to request</li>
<li>Other code listening for the event will dynamically show a login form</li>
<li>authenticate and fire a success event</li>
<li>request the original URL</li>
</ol>


<p>It took me a few hours to get this working in my app, but it&#8217;s always a nice feeling when you get the code to do what you want it to.</p>

<h2>Summary</h2>

<p>All-in-all, I enjoyed my experiment with Angular.</p>

<p>What I liked:</p>

<ul>
<li>Declarative nature with the HTML fragments</li>
<li>Lack of code to write</li>
<li>REST/resource abstraction</li>
</ul>


<p>What needs some work:</p>

<ul>
<li>Documentation</li>
<li>Examples</li>
<li>Composable views</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Re-)Discovering Frontend Web Development]]></title>
    <link href="http://stevendick.github.com/blog/2012/07/29/re-discovering-frontend-web-development/"/>
    <updated>2012-07-29T18:42:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/07/29/re-discovering-frontend-web-development</id>
    <content type="html"><![CDATA[<p>Ever since I did front-end development with C &amp; X Windows in the mid 90&#8217;s I&#8217;ve stuck to server-side development as a preference. Some ASP (no, not the nicer ASP.NET, but the original - &#42;shudder&#42;) in the late 90&#8217;s was a brief detour, but it&#8217;s been solidly server-side since.</p>

<p>We&#8217;ve all seen the trend towards applications migrating to the browser and the related resurgence of Javascript as a language.</p>

<p>Related to this, I&#8217;ve been working on a large application with a legacy Java Swing client for the last number of years and our attempts to modernise this with a service layer and a more ambitious change of client technology.</p>

<p>For various reasons we started with Flex at the tail-end of 2010, and for non-technical reasons, this approach was killed in late 2011 (no, not related to Adobe&#8217;s foot-in-mouth moment of appearing to <a href="http://blogs.adobe.com/flex/2011/11/your-questions-about-flex.html">shoot Flex in the head</a>).</p>

<p>If I was to make the decision today, I&#8217;d go with a pure web approach. While we don&#8217;t have the luxury of doing the re-write at the moment, I do want to be ready with a recommendation on what we could use.</p>

<p>This leads to the TL;DR bit - holy shit! There&#8217;s a lot of frameworks and libraries for doing modern web stuff. It&#8217;s damn confusing and I&#8217;m sure there&#8217;s plenty of right answers.</p>

<p>We want to build a web application, not a web site, so I was leaning towards the <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page application</a> style. Gmail is a classic example of this style. I&#8217;ve also never been a fan of server-side templating - this maybe a side-effect of doing ASP all those years ago. I&#8217;d prefer to keep the services as a pure API unencumbered with presentation stuff.</p>

<p>I&#8217;ll end this piece with a list of interesting libraries and frameworks I came across in my research and follow-up on what came next:</p>

<ul>
<li><a href="http://www.sencha.com/products/extjs/">Extjs</a></li>
<li><a href="http://smartclient.com/">Smartclient</a></li>
<li><a href="http://emberjs.com/">Ember.js</a></li>
<li><a href="http://backbonejs.org/">Backbone.js</a></li>
<li><a href="http://knockoutjs.com/">Knockoutjs</a></li>
<li><a href="http://angularjs.org/">AngularJS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Training]]></title>
    <link href="http://stevendick.github.com/blog/2012/06/02/clojure-training/"/>
    <updated>2012-06-02T11:24:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/06/02/clojure-training</id>
    <content type="html"><![CDATA[<p>Further to my earlier blog post on the <a href="http://stevendick.github.com/blog/2012/04/30/dive-into-clojure/">Clojure Programming</a> book, I decided to give myself a good kickstart by attending the Euroclojure training and conference in London at the end of May 2012.</p>

<p>I was disappointed to learn that only seven people were taking the opportunity for the training, especially since <a href="http://thinkrelevance.com/">Relevance</a> were they guys giving the course. On the other hand, it did mean everyone could engage with the two instructors, Stuart Sierra and Luke VanderHart (and yes, that is a capital H in the middle of his surname) at leisure.</p>

<p>At this stage of Clojure&#8217;s growth, who invests in a training course? We had a couple of trainers from Ireland, a startup founder from Denmark and two guys from the CNRS, the French National Center for Scientific Research. All keen technologists, as you&#8217;d expect. Investing in Clojure from a career point-of-view is not a sure-fire winner at this point-in-time.</p>

<p>The course was over three days and alternated between theory and some of the most challanging labs I&#8217;ve had in language training. It wasn&#8217;t always possible to complete the labs in the time allowed (which was at least an hour), but one could always come back to them in quiet moments or at the end-of-the-day. Luke and Stuart alternated between the topics and the class had a good back-and-forth discussion with both the trainers.</p>

<p>Of the lab sessions, I most enjoyed solving the how-to-score-a-hand-of-poker problems. This involved lots of higher-order function use and I needed an additional hour in the evening to finish it, but it did give a sense of accomplishment when I got the final code to run.</p>

<p>For the afternoon of the last day we had an introduction to <a href="https://github.com/clojure/clojurescript">ClojureScript</a>. This was the one part of the training that didn&#8217;t work for me. To give some context, I mostly do server side development and last did web development back in 1999 with a mixture of ASP, VBScript and Javascript. We used the <a href="http://clojurescriptone.com/">ClojureScriptOne</a> application as the starting point of wiring up a web application to rock-paper-scissors game we implemented in an earlier lab.</p>

<p>This involved too much magic for me and I couldn&#8217;t work out what needed to be done for most of the lab exercises and needed to look at the answers. So while I&#8217;m interested in ClojureScript, this lab didn&#8217;t improve my understanding.</p>

<p>For the final hour of the training Stuart suggested we work through some code examples as a group to give a more interactive approach. This worked well and helped me get on track as my solo efforts to solve the last problem were going in the wrong direction.</p>

<p>All-in-all I thoroughly enjoyed the training and would recommend it to anyone interested in getting their feet wet with Clojure. Thanks go to Stuart and Luke for an entertaining three days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Clojure]]></title>
    <link href="http://stevendick.github.com/blog/2012/04/30/dive-into-clojure/"/>
    <updated>2012-04-30T18:01:00+02:00</updated>
    <id>http://stevendick.github.com/blog/2012/04/30/dive-into-clojure</id>
    <content type="html"><![CDATA[<p>No, not a review of a Clojure book you&#8217;ve never heard of: Dive into Clojure, but more a play on words as I spent quite a bit of time reading <a href="http://clojurebook.com">Clojure Programming</a> (not to be confused with <a href="http://pragprog.com/book/shcloj/programming-clojure">Programming Clojure</a>) while on a diving holiday in Egypt&#8217;s Red Sea.</p>

<p>Before getting to the book I want to say I think O&#8217;Reilly&#8217;s Safari Online is pretty terrible. Difficult to navigate and always pushing for you to take a paid subscription. It compares badly to The <a href="http://pragprog.com">Pragmatic Programmer</a> guys in managing your books online. I was annoyed that the epud version wasn&#8217;t available until the book was finished (I regularly use the early access feature to technical books).</p>

<p>I did very little functional programming at University and what I did (ML), I didn&#8217;t like and/or appreciate. Since then I&#8217;ve been programming in a variety of languages including C/C++, Visual Basic and, for the last 10 years, Java. All firmly in the imperative style.</p>

<p>I am always looking for tools to make my programming life easier and I&#8217;ve become increasingly frustrated with Java&#8217;s verbosity and clumsy support for meta-programming.</p>

<p>Of the newer languages on the block, I&#8217;ve dabbled with Python, Ruby, Groovy, Scala and now Clojure. So far, Groovy had been the the alternative language that was usable in my day job as it can work as a companion to your Java code whereas I see the other languages as a complete replacement (though they can all run on the JVM).</p>

<p>Why Clojure? Why not? Clojure had 2 points that drew me to it: it&#8217;s a Lisp and that has an air of mysticism attached to it since it comes from the dawn of the computer age and it&#8217;s a functional language. Scala pitches itself as a functional/OOP hybrid; you&#8217;re not forced to go functional and I felt I would benefit from using a functional-only style language.</p>

<p>Of the three authors (Chas Emerick, Brian Carper and Christophe Grand), I had come across Chas and Christophe in my web reading around Clojure.</p>

<p>The first part of the book goes into detail on the nuts and bolts of Clojure before getting to the functional and concurrency parts of the language.</p>

<p>The one thing that sold me on the book and spending more time with Clojure is the example of a functional approach to implementing <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&#8217;s Game of Life</a>.</p>

<p>Wow.</p>

<p>This was a real eye opener for me on the power of a functional style. The elegance of the solution is something for me to aspire to as I learn more of Clojure.</p>

<p>This is the first time I&#8217;ve explored macros in Clojure. Previously I suffered the double trouble of hearing that macros are complicated and a mind poisoned by the C/C++ usage of the word &#8216;macro&#8217;. While I&#8217;m sure there&#8217;s plenty still to learn about them, I&#8217;m starting to see the power and their usage.</p>

<p>I enjoyed the fact that the book goes into detail on practical things, such as database access, web programming and how to deploy things. All essential features of getting stuff working in the real world.</p>

<p>I heartily recommend the book.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JaCoCo &amp; Gradle - Part 2]]></title>
    <link href="http://stevendick.github.com/blog/2012/02/12/jacoco-and-gradle-part-2/"/>
    <updated>2012-02-12T18:13:00+01:00</updated>
    <id>http://stevendick.github.com/blog/2012/02/12/jacoco-and-gradle-part-2</id>
    <content type="html"><![CDATA[<p>This is a small follow-up on my <a href="http://stevendick.github.com/blog/2012/01/22/jacoco-and-gradle/">first post</a> on<a href="http://www.eclemma.org/jacoco/">JaCoCo</a> &amp; <a href="http://www.gradle.org">Gradle</a> that shows how to collate and report the code coverage for a multi-project build.</p>

<p>We&#8217;ve already seen the basics in part one. We still run JaCoCo during the unit testing, but now the unit testing happens once per Java project.</p>

<p>I decided to collect together the generated JaCoCo coverage files for generating the report, but I think this step could be cut out, but I haven&#8217;t tried this simplification yet. Here&#8217;s the code coverage run per project and the results copied to the root project&#8217;s output directory using the projects&#8217; names as part of the new coverage file names:</p>

<div><script src='https://gist.github.com/1809759.js?file=copy-jacoco-data.groovy'></script>
<noscript><pre><code>subprojects {
    apply plugin: 'groovy'
    
    sourceCompatibility = 1.6
    
    configurations {
        codeCoverage
    }
    
    dependencies {
        codeCoverage files(&quot;${rootProject.projectDir.path}/lib/jacocoagent.jar&quot;)
    }
    
    test {
        // only include tests from the default package (which are expected to be test suites)
        include 'Test*'
        
        // JaCoCo uses an agent to do code coverage instrumentation on loading rather than instrumenting class files on disk
        // we set the jacoco property in case code needs to know that jacoco is active (otherwise some reflection tests fail)
        jvmArgs &quot;-javaagent:${configurations.codeCoverage.singleFile}=destfile=${buildDirName}/coverage-results/jacoco.exec,sessionid=HSServ,append=false&quot;, 
                '-Djacoco=true',
                '-Xms128m',
                '-Xmx512m',
                '-XX:MaxPermSize=128m'
                
        
     }
    
    task copyCoverageData(dependsOn: test, type: Copy) {
        from &quot;${buildDirName}/coverage-results&quot;
        into &quot;${rootProject.buildDir.path}/coverage-results&quot;
        include 'jacoco.exec'
        rename 'jacoco.exec', &quot;${project.name}.jacoco.exec&quot;   
    }
}</code></pre></noscript></div>


<p>Now we can generate the report from the individual JaCoCo data files and include the source code for each project:</p>

<div><script src='https://gist.github.com/1809759.js?file=generate-report.groovy'></script>
<noscript><pre><code>task generateCoverageReport &lt;&lt; {
    ant {
        taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask') {
            classpath path: &quot;${rootProject.projectDir.path}/lib/jacocoant.jar&quot;
        }
        
        mkdir dir: &quot;${buildDirName}/reports/coverage&quot;
        
        jacocoreport {
            executiondata {
                fileset(dir: &quot;${buildDirName}/coverage-results&quot;) {
                    include name: '*.jacoco.exec'
                }
            }
            
            structure(name: project.name) {
                
                classfiles {
                    dependsOnProjects.each { project -&gt;
                        fileset dir: &quot;${project.buildDir.path}/classes/main&quot;
                    }
                }
                sourcefiles(encoding: 'CP1252') {
                    dependsOnProjects.each { project -&gt;
                        fileset dir: &quot;${project.projectDir.path}/src/main/java&quot;
                    }
                }
            }
            
            xml  destfile: &quot;${buildDirName}/reports/coverage/jacoco.xml&quot;
            html destdir: &quot;${buildDirName}/reports/coverage&quot;
        }
    }
}

</code></pre></noscript></div>


<p>The final part is to wire up the dependencies. We can&#8217;t generate the report unless all the sub-projects have finished copying the JaCoCo data files:</p>

<div><script src='https://gist.github.com/1809759.js?file=coverage-report-dependencies.groovy'></script>
<noscript><pre><code>generateCoverageReport.dependsOn {
    subprojects.collect { project -&gt;
        project.copyCoverageData.path
    }
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle + Groovy + Spock + Windows == argh!]]></title>
    <link href="http://stevendick.github.com/blog/2012/02/05/gradle-plus-groovy-plus-spock-plus-windows-equals-equals-argh-slash/"/>
    <updated>2012-02-05T14:29:00+01:00</updated>
    <id>http://stevendick.github.com/blog/2012/02/05/gradle-plus-groovy-plus-spock-plus-windows-equals-equals-argh-slash</id>
    <content type="html"><![CDATA[<p>We&#8217;ve all experienced the &#8216;pleasure&#8217; of <a href="http://en.wiktionary.org/wiki/yak_shaving">Yak shaving</a>. This is the tale of my most recent one.</p>

<p>In porting our build to <a href="http://www.gradle.org">Gradle</a> we recently found we&#8217;d missed one project as part of the multi-project build. Easy, we just add the project to Gradles <code>settings.gradle</code> and all will be well.</p>

<p>Nope.</p>

<p>Another project in the build fails and it has no obvious relation to the newly re-added project. WTF? Some error about <code>groovyc</code> (the Ant task for building Groovy code) has failed.</p>

<p>A bit of googling shows we&#8217;ve run up against the command line limitation on Windows (8K for XP onwards, only 2K for older versions). Bummer, but we can change the default Gradle behaviour to run the Groovy compilation in-process rather than spawning the compiler from the command line and encountering the problem.</p>

<p>That should work. Nope.</p>

<p>Now <a href="https://github.com/spockframework/spock">Spock</a> is complaining that we&#8217;ve failed to process the annotations on all tests using Spock. This must be because we&#8217;re running in-process and Spock&#8217;s annotation processor isn&#8217;t on the classpath.</p>

<p>Maybe adding Spock to Gradle&#8217;s classpath fixes this new problem? Nope.</p>

<p>OK, back to googling around. <a href="http://stackoverflow.com/questions/5434482/how-can-i-create-a-pathing-jar-in-gradle">Stack Overflow</a> shows a workaround for problems of classpaths that are too long. Basically, replace the long classpath with an empty JAR containing a MANIFEST.MF that defines the real classpath. Sounds easy enough.</p>

<p>Does the pathing JAR solve the problem? Nope. The first problem with this solution is the lack of a clear description with examples of how this works. The classpath. The paths should be relative URLs (absolute paths appear to work on Mac OS X, but not Windows) from the point-of-view of the pathing JAR. I did this, but none of my classpath dependencies were found and no obvious reason why.</p>

<p>Argh! Back to Google. I eventually found a recent <a href="http://jira.codehaus.org/browse/GROOVY-5024">bug</a> about the command line length problem with Groovy and a proposed patch (not yet accepted). I also raised a problem with the Gradle guys to see if anyone else could point out a workaround.</p>

<p>After giving it a day and no simple workaround appearing, I decided to try and apply the patch myself and build my own local Groovy. I used the 1.8.5 version of Groovy and manually applied the patch in Eclipse as the patch line numbers didn&#8217;t match up to the source. Groovy recently moved to building with Gradle, so after cleaning up the <code>docs.gradle</code> file (it had diff markings in it, meaning it didn&#8217;t work), I was able to build with Gradle. The build did report an error right at the end, but this was after the<code>groovy</code> and <code>groovy-all</code> JARs were produced, so that wasn&#8217;t a problem.</p>

<p>Using the locally built Groovy did have one downside: I needed to provide the needed dependencies explicitly rather than relying on the transitive dependencies automatically being resolved, but that&#8217;s a small price to pay.</p>

<p>So at last, the build works and I can leave that particular Yak alone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JaCoCo &amp; Gradle]]></title>
    <link href="http://stevendick.github.com/blog/2012/01/22/jacoco-and-gradle/"/>
    <updated>2012-01-22T18:01:00+01:00</updated>
    <id>http://stevendick.github.com/blog/2012/01/22/jacoco-and-gradle</id>
    <content type="html"><![CDATA[<p>There&#8217;s a new kid on the block when it comes to code coverage in the Java world: <a href="http://http://www.eclemma.org/jacoco/">JaCoCo</a> (Java Code Coverage).</p>

<p>It comes from the guys who did the EclEmma plug-in for Eclipse after they decided it wasn&#8217;t worthwhile to evolve the Emma code coverage tool (they are not the original developers). Instead they decided to start over and JaCoCo is the (ongoing) result.</p>

<p>We originally used Emma for the code coverage, but this stopped working when we started using <a href="http://http://www.eclemma.org/jacoco/">Lombok</a> to generate all the boilerplate code that Java needs. The next step was Cobertura. I&#8217;ve worked with Cobertura in the past and found the build integration brittle; you end up with either 0% or 100% coverage and no obvious errors. Luckily one of the other guys set Cobertura up with our Ant build so I didn&#8217;t need to do it again.</p>

<p>Now I&#8217;m moving our build over to <a href="http://projectlombok.org/">Gradle</a> and wanted to look at how JaCoCo was progressing. I was pleasently surprised to find they&#8217;ve released, so I went looking for documentation on how to get this working with Gradle. No such luck and no-one to my knowledge has (yet) written a Gradle plug-in. After this, maybe I will.</p>

<p>JaCoCo does ship with Ant tasks and since Gradle includes Ant, it is very easy to use the tasks to get the work done.</p>

<p>My first problem was working out where to get JaCoCo. Maven Central seemed the logical source, but that version appeared to be missing the Ant task and wouldn&#8217;t work with my Gradle script. I went for downloading JaCoCo and adding the Jar to my build project to solve the problem.</p>

<p>One difference with JaCoCo from Cobertura is it uses a Java agent to instrument the classes on loading; no longer do we need to post-compile instrument the class files. This seems a much cleaner way of doing things.</p>

<p>A quick bit of googling turned up the solution for specifying the agent argument when executing our tests in the Gradle build:</p>

<div><script src='https://gist.github.com/1657770.js?file=junit.groovy'></script>
<noscript><pre><code>dependencies {
  codeCoverage files(&quot;${rootProject.projectDir.path}/lib/jacocoagent.jar&quot;)
}
 
test {
  jvmArgs &quot;-javaagent:${configurations.codeCoverage.singleFile}=destfile=${buildDirName}/coverage-results/jacoco.exec,sessionid=HSServ,append=false&quot;,
    'Djacoco=true',
    '-Xms128m',
    '-Xmx512m',
    '-XX:MaxPermSize=128m'
}</code></pre></noscript></div>


<p>The first thing I do is add the JaCoCo jar to a new Gradle configuration, codeCoverage. This allows me to keep the JaCoCo Jar seperate from other compile and test dependencies.</p>

<p>I&#8217;m passing a number of arguments to the agent to control JaCoCo&#8217;s behaviour:</p>

<ol>
<li><code>${configurations.codeCoverage.singleFile}</code></li>
<li><code>destfile=${buildDirName}/coverage-results/jacoco.exec</code></li>
<li><code>sessionid=HSServ</code></li>
<li><code>append=false</code></li>
</ol>


<p>Taking each of these lines in turn, we have:</p>

<ol>
<li><p>Here I make use a new configuration, <code>codeCoverage</code>, to resolve the location of the JaCoCo Jar file.</p></li>
<li><p>JaCoCo writes the code coverage metrics to a binary file we specify here.</p></li>
<li><p>Identify the code coverage session. I haven&#8217;t had any success in seeing this in the results.</p></li>
<li><p>Re-create the output file each time rather than appending to an existing file.</p></li>
</ol>


<p>This is enough to generate the statistics, but it doesn&#8217;t generate the report. For the report you need to do more work:</p>

<div><script src='https://gist.github.com/1657770.js?file=generate-coverage-report.groovy'></script>
<noscript><pre><code>task generateCoverageReport &lt;&lt; {
  ant {
    taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask') {
      classpath path: &quot;${rootProject.projectDir.path}/lib/jacocoant.jar&quot;
    }
       
    mkdir dir: &quot;${buildDirName}/reports/coverage&quot;
       
    jacocoreport {
      executiondata {
        fileset(dir: &quot;${buildDirName}/coverage-results&quot;) {
          ant.file file: 'jacoco.exec'
        }
      }
           
      structure(name: project.name) {
               
        classfiles {
          fileset dir: &quot;${project.buildDir.path}/classes/main&quot;
        }
        
        // this is for Windows
        sourcefiles(encoding: 'CP1252') {
          fileset dir: &quot;${project.projectDir.path}/src/main/java&quot;
        }
      }
           
      xml  destfile: &quot;${buildDirName}/reports/coverage/jacoco.xml&quot;
      html destdir: &quot;${buildDirName}/reports/coverage&quot;
    }
  }
}</code></pre></noscript></div>


<p>Phew! There&#8217;s a lot going on here. This is where we make use of the Ant tasks that come with JaCoCo. Let&#8217;s break it down a bit:</p>

<h3>lines 3 - 5</h3>

<p>Define an Ant task for the JaCoCo reporting task.</p>

<h3>line 7</h3>

<p>The output directory needs to exist before the report is run.</p>

<h3>lines 10 - 14</h3>

<p>Point JaCoCo to the binary file generated from the test run.</p>

<h3>lines 16 - 26</h3>

<p>The JaCoCo report needs access to the class and source files.</p>

<h3>line 28</h3>

<p>Create an XML output file (this isn&#8217;t needed if you&#8217;re only interested in the HTML output).</p>

<h3>line 29</h3>

<p>Create HTML report.</p>

<p>I link the HTML output in our <a href="http://jenkins-ci.org">Jenkins</a> build (I&#8217;m not aware of a Jenkins plug-in for JaCoCo yet).</p>

<p>The Gradle build where I use JaCoCo is a multi-project build which gives us the added challenge of combining the results from each project into a single report, but that&#8217;s for another blog entry&#8230;</p>
]]></content>
  </entry>
  
</feed>
